// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PersonType {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
}

model Action {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
}

model Person {
  id            Int         @id @default(autoincrement())
  personTypeId  Int
  personType    PersonType  @relation(fields: [userId], references: [id])
  full_name     String      @db.VarChar(255)
}

model Meeting {
  id                        Int                     @id @default(autoincrement())
  attendees                 Person[]
  motions                   Motion[]
  hearingFromCitizens       HearingFromCitizens[]
  proclamations             Proclamation[]
  resolutions               Resolution[]
  communications            Communication[]
  publicHearings            PublicHearing[]
  bills                     Bill[]
  boardAppointments         BoardAppointment[]
  requests                  Request[]
  announcements             Announcement[]
  date                      DateTime
}

model Motion {
  id                        Int                      @id @default(autoincrement())
  initiatorId               Int
  initiator                 Person                   @relation(fields: [initiatorId], references: [id])
  actionId                  Int
  action                    Action                   @relation(fields: [actionId], references: [id])
  seconderId                Int?
  seconder                  Person?                  @relation(fields: [seconderId], references: [id])
  date                      DateTime
  carried                   Boolean                  @default(false)
  meetingId                 Int
  meeting                   Meeting                  @relation(fields: [meetingId], references: [id])
  motionId                  Int?
  motion                    Motion?                  @relation(fields: [motionId], references: [id])
  hearingFromCitizenId      Int?
  hearingFromCitizen        HearingFromCitizens?     @relation(fields: [hearingFromCitizenId], references: [id])
  proclamationId            Int?
  proclamation              Proclamation?            @relation(fields: [proclamationId], references: [id])
  resolutionId              Int?
  resolution                Resolution?              @relation(fields: [resolutionId], references: [id])
  communicationId           Int?
  communication             Communication?           @relation(fields: [communicationId], references: [id])
  publicHearingId           Int?
  publicHearing             PublicHearing?           @relation(fields: [publicHearingId], references: [id])
  billId                    Int?
  bill                      Bill?                    @relation(fields: [billId], references: [id])
  boardAppointmentId        Int?
  boardAppointment          BoardAppointment?        @relation(fields: [boardAppointmentId], references: [id])
  requestId                 Int?
  request                   Request?                 @relation(fields: [requestId], references: [id])
  announcementId            Int?
  announcement              Announcement?            @relation(fields: [announcementId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  player    Player?
  email     String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Player {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  teamId    Int?
  team      Team?    @relation(fields: [teamId], references: [id])
  aspects   Aspect[]
  stats     Stat[]
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  image     String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AspectType {
  SKILL
  ATTRIBUTE
}

model Aspect {
  id         Int        @id @default(autoincrement())
  playerId   Int
  player     Player    @relation(fields: [playerId], references: [id])
  name       String     @db.VarChar(255)
  value      Decimal    @default(0)
  aspectType AspectType
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Team {
  id          Int      @id @default(autoincrement())
  homeGames   Game[]   @relation("HomeTeamGames")
  awayGames   Game[]   @relation("AwayTeamGames")
  stats       Stat[]
  players     Player[]
  name        String   @db.VarChar(255)
  image       String  @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Game {
  id         Int      @id @default(autoincrement())
  homeTeamId Int
  homeTeam   Team     @relation("HomeTeamGames", fields: [homeTeamId], references: [id])
  awayTeamId Int
  awayTeam   Team     @relation("AwayTeamGames", fields: [awayTeamId], references: [id])
  Stat       Stat[]
  season     Int
  matchDate  DateTime
  played     Boolean  @default(false)
  homeScore  Int?
  awayScore  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Stat {
  id        Int      @id @default(autoincrement())
  gameId    Int
  game      Game     @relation(fields: [gameId], references: [id])
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id])
  playerId  Int
  player    Player   @relation(fields: [playerId], references: [id])
  name      String   @db.VarChar(255)
  value     Decimal  @default(0)
  season    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
